{"version":3,"file":"dexie-batch.js","sources":["../dexie-batch.js"],"sourcesContent":["const Promise = require('dexie').Promise\n\nmodule.exports = class DexieBatch {\n  constructor(opts) {\n    assertValidOptions(opts)\n    this.opts = opts\n  }\n\n  isParallel() {\n    return Boolean(this.opts.limit)\n  }\n\n  each(collection, callback) {\n    assertValidMethodArgs(...arguments)\n\n    return this.eachBatch(collection, (batch, batchIdx) => {\n      const baseIdx = batchIdx * this.opts.batchSize\n      return Promise.all(batch.map((item, i) => callback(item, baseIdx + i)))\n    })\n  }\n\n  eachBatch(collection, callback) {\n    assertValidMethodArgs(...arguments)\n\n    const delegate = this.isParallel() ? 'eachBatchParallel' : 'eachBatchSerial'\n    return this[delegate](collection, callback)\n  }\n\n  eachBatchParallel(collection, callback) {\n    assertValidMethodArgs(...arguments)\n    if (!this.opts.limit) {\n      throw new Error('Option \"limit\" must be set for parallel operation')\n    }\n\n    const batchSize = this.opts.batchSize\n    const batchPromises = []\n\n    for (let batchIdx = 0; batchIdx * batchSize < this.opts.limit; batchIdx++) {\n      const batchPromise = collection\n        .clone()\n        .offset(batchIdx * batchSize)\n        .limit(batchSize)\n        .toArray()\n        .then(batch => callback(batch, batchIdx))\n      batchPromises.push(batchPromise)\n    }\n    return Promise.all(batchPromises).then(batches => batches.length)\n  }\n\n  eachBatchSerial(collection, callback, batchIdx = 0) {\n    assertValidMethodArgs(...arguments)\n\n    const batchSize = this.opts.batchSize\n    return collection\n      .clone()\n      .limit(batchSize)\n      .toArray()\n      .then(batch => {\n        if (batch.length === 0) return 0\n\n        const userPromise = callback(batch, batchIdx)\n        const nextBatchesPromise = this.eachBatchSerial(\n          collection.clone().offset(batchSize),\n          callback,\n          batchIdx + 1\n        )\n\n        return Promise.all([userPromise, nextBatchesPromise]).then(\n          ([, batchCount]) => batchCount + 1\n        )\n      })\n  }\n}\n\nfunction assertValidOptions(opts) {\n  const batchSize = opts && opts.batchSize\n  if (!(batchSize && Number.isInteger(batchSize) && batchSize > 0)) {\n    throw new Error('Mandatory option \"batchSize\" must be a positive integer')\n  }\n\n  if ('limit' in opts && !(Number.isInteger(opts.limit) && opts.limit >= 0)) {\n    throw new Error('Option \"limit\" must be a non-negative integer')\n  }\n}\n\nfunction assertValidMethodArgs(collection, callback) {\n  if (arguments.length < 2) {\n    throw new Error('Arguments \"collection\" and \"callback\" are mandatory')\n  }\n  if (!isCollectionInstance(collection)) {\n    throw new Error('\"collection\" must be of type Collection')\n  }\n  if (!(typeof callback === 'function')) {\n    throw new TypeError('\"callback\" must be a function')\n  }\n}\n\n// We would need the Dexie instance that created the collection to get the\n// Collection constructor and do some proper type checking.\n// So for now we resort to duck typing\nfunction isCollectionInstance(obj) {\n  if (!obj) return false\n  return ['clone', 'offset', 'limit', 'toArray'].every(\n    name => typeof obj[name] === 'function'\n  )\n}\n"],"names":["Promise","require$$0","opts","assertValidOptions","Boolean","limit","collection","callback","assertValidMethodArgs","arguments","eachBatch","batch","batchIdx","baseIdx","batchSize","all","map","item","i","delegate","isParallel","Error","batchPromises","batchPromise","clone","offset","toArray","then","push","batches","length","userPromise","nextBatchesPromise","eachBatchSerial","batchCount","Number","isInteger","isCollectionInstance","TypeError","obj","every","name"],"mappings":"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"}