/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

window.Namespace = (function() {
  return function(namespace) {
    var spaces = namespace.split('.');
    var parent = spaces.shift();

    if (!window[parent]) {
      window[parent] = {};
    }

    parent = window[parent];

    for (var i = 0, total = spaces.length; i < total; i++) {
      var space = spaces[i];

      if (!parent[space]) {
        parent[space] = {};
      }

      parent = parent[space];
    }
  };
})();

/*
 * Wire
 * Copyright (C) 2016 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Namespace('zeta.webapp.module');

  zeta.webapp.module.Bubble = (function() {
    function Bubble(options) {
      this.is_visible = bind(this.is_visible, this);
      this.on_scroll = bind(this.on_scroll, this);
      this.on_window_resize = bind(this.on_window_resize, this);
      this.on_window_click = bind(this.on_window_click, this);
      this.on_click = bind(this.on_click, this);
      var ref;
      options = $.extend({
        host_selector: void 0,
        scroll_selector: void 0,
        enable_click: false,
        modal: true,
        offset: void 0,
        arrow_size: 16,
        resize: true,
        on_show: function() {},
        on_hide: function() {}
      }, options);
      $.extend(this, options);
      this.init();
      if (!this.elements_are_present()) {
        console.warn("Cannot create bubble for '" + this.host_selector + "'. Selector not found.");
        if ((ref = this.observer) != null) {
          ref.disconnect();
        }
        return;
      }
      if (this.enable_click) {
        this.host.on('mousedown', this.on_click);
      }
      this.observer = new MutationObserver((function(_this) {
        return function(mutations) {
          return _this.recalculate();
        };
      })(this));
      this.host_observer = new MutationObserver((function(_this) {
        return function(mutations) {
          return _this.recalculate();
        };
      })(this));
    }

    Bubble.prototype.elements_are_present = function() {
      var are_present, bubble, host;
      are_present = true;
      host = $(this.host_selector);
      bubble = $(host.data('bubble'));
      if (host.length === 0) {
        are_present = false;
      }
      if (bubble.parent().get(0) === void 0) {
        are_present = false;
      }
      return are_present;
    };

    Bubble.prototype.apply_offsets = function() {
      var position_left, reposition_left;
      if (this.offset) {
        if (this.offset.left) {
          position_left = this.bubble.position().left;
          reposition_left = position_left + this.offset.left;
          this.bubble.css('left', reposition_left);
        }
        return true;
      } else {
        return false;
      }
    };

    Bubble.prototype.init = function() {
      var ref;
      this.host = $(this.host_selector);
      this.bubble = $(this.host.data('bubble'));
      this.placement = this.host.data('placement') || 'top';
      this.arrow_diagonal = Math.round(Math.sqrt(this.arrow_size * this.arrow_size * 2));
      this["class"] = '';
      this.bubble.removeClass('bubble-top bubble-left bubble-right bubble-bottom bubble-bottom-right');
      this.bubble.css('top', 'auto');
      this.bubble.css('right', 'auto');
      this.bubble.css('bottom', 'auto');
      this.bubble.css('left', 'auto');
      if ((ref = this.placement) === 'top' || ref === 'vertical') {
        this["class"] = 'bubble-bottom';
      }
      if (this.placement === 'bottom') {
        this["class"] = 'bubble-top';
      }
      if (this.placement === 'left') {
        this["class"] = 'bubble-right';
      }
      if (this.placement === 'right') {
        this["class"] = 'bubble-left';
      }
      if (this.placement === 'top-left') {
        this["class"] = 'bubble-bottom-right';
      }
      if (this.placement === 'bottom-left') {
        this["class"] = 'bubble-top-right';
      }
      return true;
    };

    Bubble.prototype.recalculate = function() {
      var bubble_height, bubble_width, distance_from_top, host_bottom, host_height, host_left, host_midpoint, host_right, host_top, host_width, parent_offset, position, ref, window_height;
      position = (ref = this.host.get(0)) != null ? ref.getBoundingClientRect() : void 0;
      host_width = this.host.outerWidth();
      host_height = this.host.outerHeight();
      if (!position || host_width === 0 || host_height === 0) {
        return this.hide();
      }
      host_left = position.left;
      host_top = position.top;
      host_bottom = host_top + host_height;
      host_right = host_left + host_width;
      bubble_width = this.bubble.outerWidth();
      bubble_height = this.bubble.outerHeight();
      parent_offset = this.bubble.parent().get(0).getBoundingClientRect();
      window_height = $(window).innerHeight();
      if (this.placement === 'top') {
        this.bubble.css('top', host_top - this.arrow_diagonal / 2 - bubble_height - parent_offset.top);
        this.bubble.css('left', host_left + (host_width - bubble_width) / 2 - parent_offset.left);
      }
      if (this.placement === 'bottom') {
        this.bubble.css('top', host_bottom + this.arrow_diagonal / 2 - parent_offset.top);
        this.bubble.css('left', host_left + (host_width - bubble_width) / 2 - parent_offset.left);
      }
      if (this.placement === 'right') {
        this.bubble.css('top', host_top + (host_height - bubble_height) / 2 - parent_offset.top);
        this.bubble.css('left', host_right + this.arrow_diagonal / 2 - parent_offset.left);
      }
      if (this.placement === 'left') {
        this.bubble.css('top', host_top + (host_height - bubble_height) / 2 - parent_offset.top);
        this.bubble.css('left', host_left - bubble_width - this.arrow_diagonal / 2 - parent_offset.left);
      }
      if (this.placement === 'top-left') {
        this.bubble.css('top', host_top - this.arrow_diagonal / 2 - bubble_height - parent_offset.top);
        this.bubble.css('left', host_left - (bubble_width - host_width) - parent_offset.left);
      }
      if (this.placement === 'bottom-left') {
        this.bubble.css('top', host_bottom + this.arrow_diagonal / 2 - parent_offset.top);
        this.bubble.css('left', host_left - (bubble_width - host_width) - parent_offset.left);
      }
      if (this.placement === 'vertical') {
        this.bubble.css('top', host_top - this.arrow_diagonal / 2 - bubble_height - parent_offset.top);
        this.bubble.css('left', host_left + (host_width - bubble_width) / 2 - parent_offset.left);
      }
      if (this.placement === 'vertical') {
        distance_from_top = host_top - this.arrow_diagonal / 2 - bubble_height;
        this.bubble.css('left', host_left + (host_width - bubble_width) / 2 - parent_offset.left);
        if (distance_from_top >= 0) {
          this.bubble.css('top', host_top - this.arrow_diagonal / 2 - bubble_height - parent_offset.top);
          this.bubble.addClass('bubble-bottom').removeClass('bubble-top');
        } else {
          this.bubble.css('top', host_bottom + this.arrow_diagonal / 2 - parent_offset.top);
          this.bubble.addClass('bubble-top').removeClass('bubble-bottom');
        }
      }
      if (this.placement === 'right-flex') {
        host_midpoint = host_top + host_height / 2;
        if (host_midpoint < bubble_height / 2) {
          this.bubble.css('top', host_top - parent_offset.top);
          this.bubble.addClass('bubble-left-top').removeClass('bubble-left bubble-left-bottom');
        } else if (host_midpoint + bubble_height / 2 > window_height) {
          this.bubble.css('top', host_bottom - bubble_height - parent_offset.top);
          this.bubble.addClass('bubble-left-bottom').removeClass('bubble-left bubble-left-top');
        } else {
          this.bubble.css('top', host_top + (host_height - bubble_height) / 2 - parent_offset.top);
          this.bubble.addClass('bubble-left').removeClass('bubble-left-top bubble-left-bottom');
        }
        this.bubble.css('left', host_right + this.arrow_diagonal / 2 - parent_offset.left);
      }
      return true;
    };

    Bubble.prototype.show = function() {
      this.init();
      this.recalculate();
      this.apply_offsets();
      this.bubble.off('transitionend');
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!_this.bubble[0]) {
            return reject();
          }
          _this.observer.observe(_this.bubble[0], {
            childList: true,
            subtree: true
          });
          if (!_this.host.parent()[0]) {
            return reject();
          }
          _this.host_observer.observe(_this.host.parent()[0], {
            childList: true,
            subtree: true
          });
          return setTimeout(function() {
            if (!_this.bubble[0]) {
              return reject();
            }
            _this.bubble.addClass("bubble-show " + _this["class"]);
            if (_this.resize) {
              $(window).on('resize', _this.on_window_resize);
            }
            if (_this.modal) {
              $(window).one('mousedown', _this.on_window_click);
              _this.bubble.on('mousedown', _this.on_cancel_click);
            }
            if (_this.scroll_selector != null) {
              $(_this.scroll_selector).one('mousewheel', _this.on_scroll);
            }
            _this.on_show();
            return setTimeout(function() {
              if (!_this.bubble[0]) {
                return _this.hide().then(function() {
                  return reject();
                });
              }
              _this.bubble.addClass('bubble-animation-show');
              return resolve();
            }, 10);
          });
        };
      })(this), 10);
    };

    Bubble.prototype.hide = function() {
      var ref;
      $(window).off('mousedown', this.on_window_click);
      this.bubble.off('mousedown', this.on_cancel_click);
      $(window).off('resize', this.on_window_resize);
      $(this.scroll_selector).off('scroll', this.on_scroll);
      if ((ref = this.observer) != null) {
        ref.disconnect();
      }
      return new Promise((function(_this) {
        return function(resolve) {
          _this.bubble.off('transitionend').removeClass('bubble-animation-show').one('transitionend', function() {});
          _this.bubble.removeClass("bubble-show " + _this["class"]);
          _this.on_hide();
          return resolve();
        };
      })(this));
    };

    Bubble.prototype.toggle = function() {
      if (this.is_visible()) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    Bubble.prototype.on_click = function(e) {
      e.stopPropagation();
      return this.toggle();
    };

    Bubble.prototype.on_window_click = function(e) {
      e.stopPropagation();
      return this.hide();
    };

    Bubble.prototype.on_cancel_click = function(e) {
      return e.stopPropagation();
    };

    Bubble.prototype.on_window_resize = function() {
      if (this.is_visible()) {
        return this.recalculate();
      }
    };

    Bubble.prototype.on_scroll = function() {
      return this.hide();
    };

    Bubble.prototype.is_visible = function() {
      return $(this.host.data('bubble')).hasClass('bubble-show');
    };

    return Bubble;

  })();

}).call(this);

(function() {
  var to_array,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.z == null) {
    window.z = {};
  }

  if (z.util == null) {
    z.util = {};
  }

  to_array = function(args) {
    return Array.prototype.slice.call(args);
  };

  z.util.Logger = (function() {
    Logger.prototype.LOG_ON_DEBUG = 'z.util.Logger::LOG_ON_DEBUG';


    /*
    @param name [String] the name that will be written in the beginning of each log message
    @param options [Object] the logger options
    @option options [Integer] color the log message color (ex. 'Orange')
    @option options [Array<String>, Object<String, LogLevel>] domains an array of domains where logging should be turned on or an object defining log levels for domains
    @option options [Boolean] high_precision weather log messages should show milliseconds or not
    @option options [Function] level a function which returns the number of the log level
    @option options [Boolean] log_time weather the time should appear in log messages or not
    @option options [Integer] name_length the minimum length of the logger's name (will be filled up with spaces)
    @option options [Integer] steps_length the minimum length of the log count (ex. 3 for '003')
     */

    function Logger(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      this.set_log_on = bind(this.set_log_on, this);
      this.set_domains = bind(this.set_domains, this);
      this.color = this.options.color || void 0;
      this.domain = window.location.hostname;
      this.domains = this.options.domains || void 0;
      this.high_precision = this.options.high_precision || true;
      this.level = this.options.level || this.levels.LEVEL_1;
      this.log_time = this.options.log_time || true;
      this.logging_name = this.name || arguments.callee.caller.name;
      this.name_length = this.options.name_length || void 0;
      this.steps_length = this.options.steps_length || 3;
      this._pad_number = function(number, width) {
        width -= number.toString().length - /\./.test(number);
        if (width > 0) {
          return new Array(width + 1).join('0') + number;
        }
        return number + '';
      };
      this._pad_string = function(string, length) {
        var padding;
        if (length === void 0) {
          return string;
        } else {
          padding = new Array(Math.max(length - string.length + 1, 0)).join(' ');
          return string + padding;
        }
      };
      this._check_log_permission = (function(_this) {
        return function() {
          var domain, domain_log_level, i, len, ref, ref1;
          if (_this.domains === void 0) {
            return true;
          }
          if (_this.domains.constructor === Array) {
            ref = _this.domains;
            for (i = 0, len = ref.length; i < len; i++) {
              domain = ref[i];
              if (window.location.hostname.indexOf(domain) > -1) {
                return true;
              }
            }
          } else if (typeof _this.domains === 'object') {
            ref1 = _this.domains;
            for (domain in ref1) {
              domain_log_level = ref1[domain];
              if (window.location.hostname.indexOf(domain) > -1) {
                _this.level = domain_log_level;
                return true;
              }
            }
          }
          return false;
        };
      })(this);
      this.log_on = this._check_log_permission();
      this.logging_name = this._pad_string(this.name, this.name_length);
      this.steps = 0;
      this._reset();
      amplify.subscribe(this.LOG_ON_DEBUG, this, this.set_log_on);
    }

    Logger.prototype.levels = {
      OFF: function() {
        return 0;
      },
      LEVEL_1: function() {
        return 300;
      },
      LEVEL_2: function() {
        return 400;
      },
      LEVEL_3: function() {
        return 500;
      },
      DEBUG: function() {
        return 700;
      },
      INFO: function() {
        return 800;
      },
      WARN: function() {
        return 900;
      },
      ERROR: function() {
        return 1000;
      }
    };

    Logger.prototype.debug = function() {
      return this.log.apply(this, [this.levels.DEBUG].concat(to_array(arguments)));
    };

    Logger.prototype.error = function() {
      return this.log.apply(this, [this.levels.ERROR].concat(to_array(arguments)));
    };

    Logger.prototype.info = function() {
      return this.log.apply(this, [this.levels.INFO].concat(to_array(arguments)));
    };

    Logger.prototype.warn = function() {
      return this.log.apply(this, [this.levels.WARN].concat(to_array(arguments)));
    };

    Logger.prototype.log = function() {
      if (this.log_on === false) {
        return -3;
      }
      if (typeof console !== 'object') {
        return -2;
      }
      if (this.level() === this.levels.OFF()) {
        return -1;
      }
      return this._print_log(to_array(arguments));
    };

    Logger.prototype.force_log = function() {
      return this._print_log(to_array(arguments));
    };

    Logger.prototype.set_domains = function(domain_options) {
      this.domains = domain_options;
      return this.log_on = this._check_log_permission();
    };


    /*
    @param is_enabled [Boolean] True, if logging should be enabled
    @return [Integer] The new log level as number
     */

    Logger.prototype.set_log_on = function(is_enabled) {
      this.log_on = is_enabled;
      if (is_enabled && this.level() === this.levels.OFF()) {
        this.level = this.levels.LEVEL_1;
      }
      return this.level();
    };

    Logger.prototype._parse_info = function(arguments_array) {
      var i, len, results, value;
      results = [];
      for (i = 0, len = arguments_array.length; i < len; i++) {
        value = arguments_array[i];
        if (typeof value === 'string') {
          results.push(this.log_message = value);
        } else if (typeof value === 'function') {
          results.push(this.log_level = value());
        } else {
          results.push(this.log_objects.push(value));
        }
      }
      return results;
    };

    Logger.prototype._print_log = function(args) {
      var dashes, log, log_method, ref, ref1, time;
      if (args.length === 1) {
        if (typeof args[0] === 'string') {
          this.log_message = args[0];
        } else {
          this.log_objects.push(args[0]);
        }
        this.log_level = this.levels.LEVEL_1();
      } else {
        this._parse_info(args);
      }
      if (this.log_level === void 0) {
        this.log_level = this.levels.LEVEL_1();
      }
      if (this.log_level < this.level()) {
        this._reset();
        return 0;
      }
      if (this.log_message !== void 0) {
        this.log_layout = 1;
        if (this.log_time) {
          time = moment().format('HH:mm:ss.SSS');
          dashes = '';
          if (this.log_level === this.levels.LEVEL_2()) {
            dashes = '-- ';
          }
          if (this.log_level === this.levels.LEVEL_3()) {
            dashes = '--- ';
          }
          this.log_message = this.logging_name + " | " + time + " | " + dashes + this.log_message;
        }
        if (this.log_objects.length > 0) {
          this.log_layout = 2;
        }
        if (this.color) {
          this.log_layout = 3;
        }
      }
      log = window.console.log;
      log_method = window.winston != null ? 'info' : 'log';
      switch (this.log_level) {
        case this.levels.DEBUG():
          log_method = 'debug';
          break;
        case this.levels.INFO():
          log_method = 'info';
          break;
        case this.levels.WARN():
          log_method = 'warn';
          break;
        case this.levels.ERROR():
          log_method = 'error';
      }
      if (this.log_layout === 1) {
        window.console[log_method].call(window.console, this.log_message);
        if ((ref = window.winston) != null) {
          ref[log_method].call(window.winston, this.log_message);
        }
      } else if (this.log_layout === 2) {
        window.console[log_method].call(window.console, this.log_message, this.log_objects);
        if ((ref1 = window.winston) != null) {
          ref1[log_method].call(window.winston, this.log_message);
        }
      } else if (this.log_layout === 3) {
        if (this.log_objects.length > 0) {
          log.call(window.console, "%c" + this.log_message, "color: " + this.color, this.log_objects);
        } else {
          log.call(window.console, "%c" + this.log_message, "color: " + this.color);
        }
      }
      this._reset();
      return 0;
    };

    Logger.prototype._reset = function() {
      this.log_layout = -1;
      this.log_level = void 0;
      this.log_message = '';
      this.log_objects = [];
      return this.steps += 1;
    };

    return Logger;

  })();

}).call(this);

//# sourceMappingURL=wire-component.min.js.map