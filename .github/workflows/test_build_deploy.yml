name: CI

on:
  push:
    branches: [master, dev, edge, avs, mobile, acc, stefan]
    tags:
      - '*staging*'
      - '*production*'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Docker image and Helm Chart
    runs-on: buildjet-8vcpu-ubuntu-2204

    outputs:
      wire_builds_target_branches: ${{ steps.output_target_branches.outputs.wire_builds_target_branches }}

    env:
      TEST_COVERAGE_FAIL_THRESHOLD: 45
      TEST_COVERAGE_WARNING_THRESHOLD: 60
      COMMIT_URL: ${{github.event.head_commit.url}}
      COMMITTER: ${{github.event.head_commit.committer.name}}

    steps:
      - uses: azure/setup-helm@v3
        with:
           version: '3.12.2'
        id: install

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16.x
          cache: 'yarn'

      - name: Set environment variables
        run: |
          echo "BRANCH_NAME=$(git branch --show-current)" >> $GITHUB_ENV
          echo "TAG=$(git tag --points-at ${{github.sha}})" >> $GITHUB_ENV
          echo "PR_LAST_COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{github.event.after}} | head -n 1)" >> $GITHUB_ENV

      - uses: kanga333/variable-mapper@master
        name: Determine target branches in wireapp/wire-builds
        with:
          key: "${{env.BRANCH_NAME}}"
          map: |
            {
              "stefan": { "wire_builds_target_branches" : "[\"main\"]" },
              "dev": { "wire_builds_target_branches" : "[\"main\"]" }
            }

      - name: Make target branches available as output to other jobs
        id: output_target_branches
        shell: bash
        run: |
          echo "wire_builds_target_branches: $wire_builds_target_branches"
          echo "wire_builds_target_branches=$wire_builds_target_branches" >> $GITHUB_OUTPUT

      - name: Set TITLE and BUILD_DESKTOP
        env:
          PR_TITLE: ${{github.event.pull_request.title || env.PR_LAST_COMMIT_MESSAGE}}
        run: |
          echo "TITLE=${PR_TITLE}" >> $GITHUB_ENV
          echo "BUILD_DESKTOP=${{contains(env.TAG, 'staging') || contains(env.TAG, 'production') || contains(env.PR_LAST_COMMIT_MESSAGE, '+Desktop')}}" >> $GITHUB_ENV

      - name: Print environment variables
        run: |
          echo -e "BRANCH_NAME = ${BRANCH_NAME}"
          echo -e "TAG = ${TAG}"
          echo -e "TITLE = ${TITLE}"
          echo -e "PR_LAST_COMMIT_MESSAGE = ${PR_LAST_COMMIT_MESSAGE}"
          echo -e "COMMIT_URL = ${COMMIT_URL}"
          echo -e "COMMITTER = ${COMMITTER}"
          echo -e "BUILD_DESKTOP = ${BUILD_DESKTOP}"

      - name: Skip CI
        if: |
          contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, 'skip ci') ||
          contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, '[ci skip]')
        uses: andymckay/cancel-action@0.3

      - name: Authenticate git clone
        env:
          GH_TOKEN: ${{secrets.OTTO_THE_BOT_GH_TOKEN}}
        run: echo "machine github.com login ${GH_TOKEN}" > ~/.netrc

      - name: Install JS dependencies
        run: yarn --immutable

      - name: Test
        run: |
          set -o pipefail
          yarn test --coverage --coverage-reporters=lcov --detectOpenHandles=false 2>&1 | tee ./unit-tests.log

      - name: Monitor coverage
        uses: codecov/codecov-action@v3.1.4
        with:
          fail_ci_if_error: false
          files: ./coverage/lcov.info
          flags: unittests

      - name: Build
        run: yarn build:prod

      - name: Push Docker image
        id: push_docker_image
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
        run: |
          version_tag="${TAG:-$BRANCH_NAME}"
          if [[ "$version_tag" == *"production"* ]]; then
            config_entry="wire-web-config-default-master"
          else
            config_entry="wire-web-config-default-staging"
          fi
          yarn docker "$config_entry" "$version_tag" ./image_tag.txt

          packageVersion=$(cat ./package.json | jq -r '.version')
          imageTag="$(cat ./image_tag.txt)"

          echo "{\"imageTag\": \"${imageTag}\", \"releaseName\": \"${TAG:-v${packageVersion}}\"}" > ./release-info.json

          echo "imageTag=$imageTag" >> $GITHUB_OUTPUT

      - name: Publish Helm chart
        shell: bash
        env:
           AWS_ACCESS_KEY_ID: ${{ secrets.CHARTS_WEBAPP_AUTOMATION_AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.CHARTS_WEBAPP_AUTOMATION_AWS_SECRET_ACCESS_KEY }}
        run: |
          set -eo pipefail

          echo "imageTag from previous step: ${{ steps.push_docker_image.outputs.imageTag }}"

          image_tag="$(jq -Mr ".imageTag" ./release-info.json)"

          helm plugin install https://github.com/hypnoglow/helm-s3.git --version 0.15.1

          helm repo add charts-webapp s3://public.wire.com/charts-webapp

          if [ "$TAG" != "" ]; then
            chart_version="$(./bin/chart-next-version.sh release)"
          else
            chart_version="$(./bin/chart-next-version.sh prerelease)"
          fi

          chart_patched="$(yq -Mr ".version = \"$chart_version\" | .appVersion = \"$image_tag\"" ./charts/webapp/Chart.yaml)"
          echo "$chart_patched" > ./charts/webapp/Chart.yaml

          helm package ./charts/webapp

          helm s3 push webapp-*.tgz charts-webapp

          ri="$(jq ".chartVersion = \"$chart_version\"" ./release-info.json)"
          echo "$ri" > ./release-info.json

          echo "release-info.json :"
          cat ./release-info.json

      - name: Store release information
        uses: actions/upload-artifact@v3
        with:
          name: release-info.json
          path: ./release-info.json

  publish_wire_builds:
    name: Bump webapp chart in wire-builds
    runs-on: ubuntu-latest

    needs: build

    strategy:
      matrix:
        target_branch: ${{fromJSON(needs.build.outputs.wire_builds_target_branches)}}

    steps:
      - name: Obtain release information artifact
        id: release-info-artifact
        uses: actions/download-artifact@v3
        with:
          name: release-info.json

      - name: Check out wire-builds
        uses: actions/checkout@v4
        with:
          repository: wireapp/wire-builds
          token: ${{secrets.WIRE_BUILDS_WRITE_ACCESS_GH_TOKEN}}
          ref: ${{matrix.target_branch}}
          fetch-depth: 1

      - name: Create new build in wire-build
        shell: bash
        run: |
          git fetch --depth 1 origin "${{ matrix.target_branch }}"
          git checkout "${{ matrix.target_branch }}"

          release_file='${{ steps.release-info-artifact.outputs.download-path }}/release-info.json'
          chart_version="$(jq ".chartVersion" "$release_file)"

          build_json=$(cat ./build.json | ./bin/bump-chart webapp "$chart_version" | ./bin/bump-prerelease )
          echo "$build_json" > ./build.json

          git add build.json
          git config --global user.email "zebot@users.noreply.github.com"
          git config --global user.name "Zebot"
          git commit -m "Bump webapp to $chart_version"

          git push origin "${{ matrix.target_branch }}"


  # FUTUREWORK: Remove this job once production builds are based on wireapp/wire-builds
  update_helm_chart:
    name: "Create PR in wire-server: Bump Helm chart"
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Obtaining release information artifact
        id: release-info-artifact
        uses: actions/download-artifact@v3
        with:
          name: release-info.json

      - name: Check whether this is a production release
        id: release-info-file
        env:
          ARTIFACT_LOCAL_PATH: '${{ steps.release-info-artifact.outputs.download-path }}/release-info.json'
        shell: bash
        run: |
          imageTag="$(jq -Mr ".imageTag" "$ARTIFACT_LOCAL_PATH")"
          if [[ "$imageTag" == *"production"* ]]; then
             echo '::set-output name=exists::true'
             echo "::set-output name=releaseInfo::$(cat ${ARTIFACT_LOCAL_PATH})"
          fi

      - name: Checking out 'wire-server'
        uses: actions/checkout@v4
        if: ${{ steps.release-info-file.outputs.exists == 'true' }}
        with:
          repository: 'wireapp/wire-server'
          fetch-depth: 1

      - name: Changing Helm value of the webapp chart
        id: change-helm-value
        if: ${{ steps.release-info-file.outputs.exists == 'true' }}
        shell: bash
        run: |
          sed --in-place --expression="s/  tag: .*/  tag: \"${{ fromJSON(steps.release-info-file.outputs.releaseInfo).imageTag }}\"/" ./charts/webapp/values.yaml
          git add ./charts/webapp/values.yaml
          echo "Upgrade webapp version to ${{ fromJSON(steps.release-info-file.outputs.releaseInfo).imageTag }}" > ./changelog.d/0-release-notes/webapp-upgrade
          git add ./changelog.d/0-release-notes/webapp-upgrade
          echo "::set-output name=releaseUrl::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${{ fromJSON(steps.release-info-file.outputs.releaseInfo).releaseName }}"

      - name: Creating Pull Request
        id: create-pr
        if: ${{ steps.release-info-file.outputs.exists == 'true' }}
        uses: peter-evans/create-pull-request@v5
        with:
          draft: false
          token: ${{ secrets.ZEBOT_GH_TOKEN }}
          author: 'Zebot <zebot@users.noreply.github.com>'
          branch: charts-update-webapp-image-tag-${{ github.run_number }}
          commit-message: 'chore: [charts] Update webapp version'
          title: 'Update webapp version in Helm chart [skip ci]'
          body: |
            Image tag: `${{ fromJSON(steps.release-info-file.outputs.releaseInfo).imageTag }}`
            Release: [`${{ fromJSON(steps.release-info-file.outputs.releaseInfo).releaseName }}`](${{ steps.change-helm-value.outputs.releaseUrl }})

      - name: Printing Pull Request URL
        if: ${{ steps.release-info-file.outputs.exists == 'true' }}
        shell: bash
        run: |
          echo "PR: ${{ steps.create-pr.outputs.pull-request-url }}"


  cleanup_artifacts:
    permissions:
      contents: none
    name: Cleanup artifacts
    needs: update_helm_chart
    runs-on: ubuntu-latest

    steps:
      - name: Delete WebApp artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            webapp-dist
            release-info.json
