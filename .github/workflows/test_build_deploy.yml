name: CI

on:
  push:
    branches: [master, dev, edge, avs]
    tags:
      - '*staging*'
      - '*production*'
  pull_request:
    branches: [master, dev, edge, avs]

jobs:
  test_build_deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        DISTRIBUTION: ['DISTRIBUTION_0', 'DISTRIBUTION_1']

    env:
      TEST_COVERAGE_FAIL_THRESHOLD: 45
      TEST_COVERAGE_WARNING_THRESHOLD: 60
      DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS: 150
      AWS_APPLICATION_NAME: Webapp
      AWS_BUILD_ZIP_PATH: server/dist/s3/ebs.zip
      COMMIT_URL: ${{github.event.head_commit.url}}
      COMMITTER: ${{github.event.head_commit.committer.name}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use latest Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Set environment variables
        env:
          # DISTRIBUTIONS are saved in the format `distribution-{name}`
          DISTRIBUTION: ${{secrets[matrix.DISTRIBUTION]}}
        run: |
          echo "BRANCH_NAME=$(git branch --show-current)" >> $GITHUB_ENV
          echo "TAG=$(git tag --points-at ${{github.sha}})" >> $GITHUB_ENV
          echo "PR_LAST_COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{github.event.after}} | head -n 1)" >> $GITHUB_ENV
          echo "DISTRIBUTION=${DISTRIBUTION/distribution-/}" >> $GITHUB_ENV

      - name: Set TITLE and BUILD_DESKTOP
        env:
          PR_TITLE: ${{github.event.pull_request.title || env.PR_LAST_COMMIT_MESSAGE}}
        run: |
          echo "TITLE=${PR_TITLE}" >> $GITHUB_ENV
          echo "BUILD_DESKTOP=${{contains(env.TAG, 'staging') || contains(env.TAG, 'production') || contains(env.PR_LAST_COMMIT_MESSAGE, '+Desktop')}}" >> $GITHUB_ENV

      - name: Print environment variables
        env:
          GITHUB_CONTEXT: ${{toJson(github)}}
        run: |
          echo -e "BRANCH_NAME = ${BRANCH_NAME}"
          echo -e "TAG = ${TAG}"
          echo -e "TITLE = ${TITLE}"
          echo -e "PR_LAST_COMMIT_MESSAGE = ${PR_LAST_COMMIT_MESSAGE}"
          echo -e "COMMIT_URL = ${COMMIT_URL}"
          echo -e "COMMITTER = ${COMMITTER}"
          echo -e "BUILD_DESKTOP = ${BUILD_DESKTOP}"
          echo -e "GITHUB_CONTEXT = ${GITHUB_CONTEXT}"

      - name: Skip CI
        if: |
          contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, '[skip ci]') ||
          contains(env.TITLE || env.PR_LAST_COMMIT_MESSAGE, '[ci skip]')
        uses: andymckay/cancel-action@0.2

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{github.token}}

      - name: Yarn cache
        uses: c-hive/gha-yarn-cache@v1

      - name: Authenticate git clone
        env:
          GH_TOKEN: ${{secrets.OTTO_THE_BOT_GH_TOKEN}}
        run: echo "machine github.com login ${GH_TOKEN}" > ~/.netrc

      - name: Install JS dependencies
        # Run for all PRs with DISTRIBUTION == 'wire', all pushes to master/dev
        # and when a desktop version should be built
        if: |
          matrix.DISTRIBUTION == 'DISTRIBUTION_0' ||
          github.event_name != 'pull_request' ||
          env.BUILD_DESKTOP == 'true'
        run: yarn --frozen-lockfile

      - name: Test
        # Run for all PRs and pushes to master/dev with DISTRIBUTION == 'wire'
        if: matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        run: yarn test --coverage --coverage-reporters=lcov --detectOpenHandles=false --forceExit

      - name: Monitor coverage
        # Run for all PRs with DISTRIBUTION == 'wire'
        if: matrix.DISTRIBUTION == 'DISTRIBUTION_0' && github.event_name == 'pull_request'
        uses: codecov/codecov-action@v1.3.2
        with:
          fail_ci_if_error: false
          files: ./coverage/lcov.info
          flags: unittests

      - name: Build
        # Run for all pushes to master/dev with DISTRIBUTION == 'wire'
        # and when a desktop version should be built
        if: |
          github.event_name != 'pull_request' ||
          env.BUILD_DESKTOP == 'true'
        run: yarn build:prod

      # https://wire-webapp-avs.zinfra.io/
      - name: Deploy avs build to Elastic Beanstalk
        if: env.BRANCH_NAME == 'avs' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-avs
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      # Stage 1: https://wire-webapp-edge.zinfra.io/
      - name: Deploy edge build to Elastic Beanstalk
        if: env.BRANCH_NAME == 'edge' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-edge
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      # Stage 2: https://wire-webapp-dev.zinfra.io/
      - name: Deploy dev build to Elastic Beanstalk
        if: env.BRANCH_NAME == 'dev' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-dev
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      # Stage 3: https://wire-webapp-staging.zinfra.io/
      - name: Deploy staging build to Elastic Beanstalk
        if: contains(env.TAG, 'staging') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-staging
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{env.TAG}}-${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      # Stage 4: https://wire-webapp-master.zinfra.io/
      - name: Deploy master build to Elastic Beanstalk
        if: env.BRANCH_NAME == 'master' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-master
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      # Stage 5: https://app.wire.com/
      - name: Deploy production build to Elastic Beanstalk
        if: contains(env.TAG, 'production') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          application_name: ${{env.AWS_APPLICATION_NAME}}
          aws_access_key: ${{secrets.WEBTEAM_AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.WEBTEAM_AWS_SECRET_ACCESS_KEY}}
          deployment_package: ${{env.AWS_BUILD_ZIP_PATH}}
          environment_name: wire-webapp-prod
          region: eu-central-1
          use_existing_version_if_available: true
          version_description: ${{github.sha}}
          version_label: ${{env.TAG}}-${{github.run_id}}
          wait_for_deployment: false
          wait_for_environment_recovery: ${{env.DEPLOYMENT_RECOVERY_TIMEOUT_SECONDS}}

      - name: Push master/dev/edge Docker image
        if: |
          env.BRANCH_NAME == 'master' ||
          env.BRANCH_NAME == 'dev' ||
          env.BRANCH_NAME == 'edge'
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
        run: |
          if [ "$DISTRIBUTION" == "wire" ]; then
            yarn docker '' "${{env.BRANCH_NAME}}"
          fi

      - name: Push staging Docker image
        if: contains(env.TAG, 'staging')
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
        run: |
          if [ "$DISTRIBUTION" == "wire" ]; then
            yarn docker '' staging "$TAG"
          else
            yarn docker "$DISTRIBUTION" staging "$TAG"
          fi

      - name: Push production Docker image
        if: contains(env.TAG, 'production')
        env:
          DOCKER_PASSWORD: ${{secrets.WEBTEAM_QUAY_PASSWORD}}
          DOCKER_USERNAME: ${{secrets.WEBTEAM_QUAY_USERNAME}}
        run: |
          if [ "$DISTRIBUTION" == "wire" ]; then
            yarn docker '' production "$TAG"
          else
            yarn docker "$DISTRIBUTION" production "$TAG"
          fi

      - name: Generate changelog
        if: contains(env.TAG, 'production') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        run: yarn changelog:ci

      - name: Create GitHub production release
        id: create_release_production
        if: contains(env.TAG, 'production') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{github.token}}
        with:
          tag_name: ${{env.TAG}}
          name: ${{env.TAG}}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      - name: Create GitHub staging release draft
        id: create_release_staging
        if: contains(env.TAG, 'staging') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{github.token}}
        with:
          tag_name: ${{env.TAG}}
          name: ${{env.TAG}}
          draft: true
          prerelease: true

      - name: Notify staging bump
        if: contains(env.TAG, 'staging') && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: wireapp/github-action-wire-messenger@v1
        with:
          email: ${{secrets.WIRE_BOT_EMAIL}}
          password: ${{secrets.WIRE_BOT_PASSWORD}}
          conversation: 4223f57f-0c8d-42fe-bf8a-908d680788ab
          text: 'Staging bump for commit **${{github.sha}}** ("${{env.TITLE}}") done! 🏁'

      - name: Notify AVS commit
        if: env.BRANCH_NAME == 'avs' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: wireapp/github-action-wire-messenger@v1
        with:
          email: ${{secrets.WIRE_BOT_EMAIL}}
          password: ${{secrets.WIRE_BOT_PASSWORD}}
          conversation: 5496b04a-afd3-410e-8154-855142bcfb03
          text: 'Deployed commit **${{github.sha}}** ("${{env.TITLE}}") on [wire-webapp-avs](https://wire-webapp-avs.zinfra.io/). 🏁'

      - name: Notify CI error
        if: failure() && github.event_name != 'pull_request' && matrix.DISTRIBUTION == 'DISTRIBUTION_0'
        uses: wireapp/github-action-wire-messenger@v1
        with:
          email: ${{secrets.WIRE_BOT_EMAIL}}
          password: ${{secrets.WIRE_BOT_PASSWORD}}
          conversation: b2cc7120-4154-4be4-b0c0-45a8c361c4d1
          text: '${{env.COMMITTER}} broke the "${{env.BRANCH_NAME}}" branch on "${{github.repository}}" with [${{env.TITLE}}](${{env.COMMIT_URL}}) 🌵'

      - name: Build config.js file for desktop
        if: env.BUILD_DESKTOP == 'true'
        run: node electron/bin/build-config.js

      - name: Upload WebApp artifacts
        if: env.BUILD_DESKTOP == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: webapp-dist
          path: ./server/dist

  build_desktop_binaries:
    name: Build desktop binaries
    needs: test_build_deploy
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set environment variables
        shell: bash
        run: |
          echo "TAG=$(git tag --points-at ${{github.sha}})" >> $GITHUB_ENV
          echo "PR_LAST_COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{github.event.after}} | head -n 1)" >> $GITHUB_ENV

      - name: Set BUILD_DESKTOP
        shell: bash
        run: |
          echo "BUILD_DESKTOP=${{contains(env.TAG, 'staging') || contains(env.TAG, 'production') || contains(env.PR_LAST_COMMIT_MESSAGE, '+Desktop')}}" >> $GITHUB_ENV

      - name: Print environment variables
        shell: bash
        env:
          GITHUB_CONTEXT: ${{toJson(github)}}
        run: |
          echo -e "TAG = ${TAG}"
          echo -e "PR_LAST_COMMIT_MESSAGE = ${PR_LAST_COMMIT_MESSAGE}"
          echo -e "BUILD_DESKTOP = ${BUILD_DESKTOP}"
          echo -e "GITHUB_CONTEXT = ${GITHUB_CONTEXT}"

      - name: Use latest Node.js v12
        if: env.BUILD_DESKTOP == 'true'
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Cache Electron
        if: env.BUILD_DESKTOP == 'true'
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.cache/electron
          key: ${{runner.os}}-electron-cache-${{hashFiles(format('{0}{1}', github.workspace, 'electron/yarn.lock'))}}
          restore-keys: ${{runner.os}}-electron-cache-

      - name: Cache electron-builder
        if: env.BUILD_DESKTOP == 'true'
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.cache/electron-builder
          key: ${{runner.os}}-electron-builder-cache-${{hashFiles(format('{0}{1}', github.workspace, 'electron/yarn.lock'))}}
          restore-keys: ${{runner.os}}-electron-builder-cache-

      - name: Download WebApp artifacts
        if: env.BUILD_DESKTOP == 'true'
        uses: actions/download-artifact@v2
        with:
          name: webapp-dist
          path: ./server/dist

      - name: Install JS dependencies
        if: env.BUILD_DESKTOP == 'true'
        working-directory: electron
        run: yarn

      - name: Prepare building desktop app
        if: env.BUILD_DESKTOP == 'true'
        working-directory: electron
        run: |
          yarn copy:webapp
          yarn dist

      - name: Build desktop app for Windows
        if: env.BUILD_DESKTOP == 'true' && matrix.os == 'windows-latest'
        shell: bash
        working-directory: electron
        run: |
          echo "OS=windows" >> $GITHUB_ENV
          yarn build:windows

      - name: Build desktop app for Linux
        if: env.BUILD_DESKTOP == 'true' && matrix.os == 'ubuntu-latest'
        working-directory: electron
        run: |
          echo "OS=linux" >> $GITHUB_ENV
          yarn build:linux

      - name: Build desktop app for macOS
        if: env.BUILD_DESKTOP == 'true' && matrix.os == 'macos-latest'
        working-directory: electron
        run: |
          echo "OS=macos" >> $GITHUB_ENV
          yarn build:macos

      - name: Attach desktop build to staging release assets
        if: contains(env.TAG, 'staging')
        uses: xresloader/upload-to-github-release@v1.3.0
        env:
          GITHUB_TOKEN: ${{github.token}}
        with:
          draft: true
          file: './electron/build/WireInternal-*(*.deb|*.dmg|*.exe|*.msi)'
          tag_name: ${{env.TAG}}
          verbose: true

      - name: Attach desktop build to production release assets
        if: contains(env.TAG, 'production')
        uses: xresloader/upload-to-github-release@v1.3.0
        env:
          GITHUB_TOKEN: ${{github.token}}
        with:
          draft: false
          file: './electron/build/Wire-*(*.deb|*.dmg|*.exe|*.msi)'
          tag_name: ${{env.TAG}}
          verbose: true

  cleanup_artifacts:
    name: Cleanup artifacts
    needs: build_desktop_binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set environment variables
        shell: bash
        run: |
          echo "TAG=$(git tag --points-at ${{github.sha}})" >> $GITHUB_ENV
          echo "PR_LAST_COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{github.event.after}} | head -n 1)" >> $GITHUB_ENV

      - name: Set BUILD_DESKTOP
        shell: bash
        run: |
          echo "BUILD_DESKTOP=${{contains(env.TAG, 'staging') || contains(env.TAG, 'production') || contains(env.PR_LAST_COMMIT_MESSAGE, '+Desktop')}}" >> $GITHUB_ENV

      - name: Delete WebApp artifacts
        if: env.BUILD_DESKTOP == 'true'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: webapp-dist
