<div id="video-calling" data-bind="hide_controls: z.viewModel.VideoCallingViewModel.CONFIG.HIDE_CONTROLS_TIMEOUT, css:{ 'video-calling--active': isCallOngoing(), 'video-calling--minimized': multitasking.isMinimized()}" class="video-calling">
  <!-- ko if: videodCall() && !multitasking.isMinimized()-->
    <!-- ko if: showRemote() -->
      <div id="video-element-remote" class="video-element-remote">
        <group-video-grid params="streamsInfo: remoteVideoStreamsInfo, ownStream: localVideoStream, calls: calls"></group-video-grid>
        <!-- ko if: showRemoteParticipant() -->
          <div class="video-element-remote-participant">
            <!-- ko ifnot: videodCall().isGroup -->
              <participant-avatar class="video-element-remote-participant avatar-no-badge" params="participant: remoteUser, size: z.components.ParticipantAvatar.SIZE.X_LARGE"></participant-avatar>
            <!-- /ko -->
          </div>
        <!-- /ko -->

        <!-- ko if: showRemoteVideo() && !isChoosingScreen() -->
          <div class="video-element-overlay hide-controls-hidden" data-bind="event: {dblclick: doubleClickedOnRemoteVideo}"></div>
        <!-- /ko -->

        <!-- ko if: isChoosingScreen() -->
          <choose-screen params="cancel: clickedOnCancelScreen,
                                      choose: clickedOnChooseScreen,
                                      screens: availableDevices.screen_input"></choose-screen>
        <!-- /ko -->

        <!-- ko if: showControls() -->
          <div id="video-title" class="video-title"
            data-bind="css: {'hide-controls-hidden': !showRemoteParticipant() && !isChoosingScreen(), 'video-element-dark': showRemoteParticipant()}">
            <div class="video-remote-name" data-bind="text: videodCall().conversationEntity.display_name()"></div>
            <div class="video-timer label-xs" data-bind="text: z.util.TimeUtil.formatSeconds(videodCall().durationTime())"></div>
          </div>
        <!-- /ko -->

        <!-- ko if: showControls() && !isChoosingScreen() -->
          <div id="video-controls" class="video-controls" data-bind="css: {'hide-controls-hidden': !showRemoteParticipant()}">

            <div class="video-controls__button"
              data-bind="click: clickedOnMinimize"
              data-uie-name="do-call-controls-video-minimize">
              <message-icon></message-icon>
              <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayConversations"></div>
            </div>

            <div class="video-controls__button"
              data-bind="click: clickedOnMuteAudio, css: {'video-controls__button--active': !selfStreamState.audioSend()}, attr: {'data-uie-value': selfStreamState.audioSend() ? 'inactive' : 'active'}"
              data-uie-name="do-call-controls-video-call-mute">
              <micoff-icon></micoff-icon>
              <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayMute"></div>
            </div>

            <!-- ko if: showToggleVideo() -->
              <div class="video-controls__button"
              data-bind="click: clickedOnStopVideo, css: {'video-controls__button--active': selfStreamState.videoSend()}, attr: {'data-uie-value': selfStreamState.videoSend() ? 'active' : 'inactive'}"
              data-uie-name="do-call-controls-toggle-video">
                <camera-icon></camera-icon>
                <!-- ko if: showSwitchCamera() -->
                  <device-toggle-button data-bind="click: clickedOnToggleCamera"
                    params="index: currentDeviceIndex.video_input,
                      devices: availableDevices.video_input,
                      type: z.media.MediaDeviceType.VIDEO_INPUT">
                  </device-toggle-button>
                <!-- /ko -->
                <!-- ko ifnot: showSwitchCamera() -->
                  <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayVideo"></div>
                <!-- /ko -->
              </div>
            <!-- /ko -->

            <!-- ko if: showToggleScreen() -->
              <div class="video-controls__button"
                data-bind="click: clickedOnShareScreen, css: {'video-controls__button--active': selfStreamState.screenSend(), 'video-controls__button--disabled': disableToggleScreen()}"
                data-uie-name="do-call-controls-toggle-screen">
                <screenshare-icon></screenshare-icon>
                <!-- ko if: showSwitchScreen() -->
                  <device-toggle-button data-bind="click: clickedOnToggleScreen"
                    params="index: currentDeviceIndex.screen_input,
                      devices: availableDevices.screen_input,
                      type: z.media.MediaDeviceType.SCREEN_INPUT">
                  </device-toggle-button>
                <!-- /ko -->
                <!-- ko ifnot: showSwitchScreen() -->
                  <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayShareScreen"></div>
                <!-- /ko -->
              </div>
            <!-- /ko -->

            <div class="video-controls__button video-controls__button--red"
              data-bind="click: clickedOnLeaveCall"
              data-uie-name="do-call-controls-video-call-cancel">
              <hangup-icon></hangup-icon>
              <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayHangUp"></div>
            </div>
          </div>
        <!-- /ko -->
      </div>
    <!-- /ko -->
  <!-- /ko -->
</div>
