<div id="video-calling" data-bind="hide_controls: {timeout: z.viewModel.VideoCallingViewModel.CONFIG.HIDE_CONTROLS_TIMEOUT, skipClass: 'video-controls__button'}, css:{'video-calling--active': showFullscreen(), 'video-calling--minimized': multitasking.isMinimized()}" class="video-calling">
  <!-- ko if: showFullscreen() -->
    <div id="video-element-remote" class="video-element-remote">
      <group-video-grid params="videoGridRepository: videoGridRepository"></group-video-grid>
      <!-- ko if: showRemoteParticipant() -->
        <div class="video-element-remote-participant">
          <!-- ko ifnot: videodCall().isGroup -->
            <participant-avatar class="video-element-remote-participant avatar-no-badge" params="participant: remoteUser, size: z.components.ParticipantAvatar.SIZE.X_LARGE"></participant-avatar>
          <!-- /ko -->
        </div>
      <!-- /ko -->

      <!-- ko if: !isChoosingScreen() -->
        <div class="video-element-overlay hide-controls-hidden"></div>
      <!-- /ko -->

      <!-- ko if: isChoosingScreen() -->
        <choose-screen params="cancel: clickedOnCancelScreen, choose: clickedOnChooseScreen, screens: availableDevices.screenInput"></choose-screen>
      <!-- /ko -->

      <!-- ko if: showControls() -->
        <div id="video-title" class="video-title hide-controls-hidden">
          <div class="video-remote-name" data-bind="text: videodCall().conversationEntity.display_name()"></div>
          <div class="video-timer label-xs" data-bind="text: z.util.TimeUtil.formatSeconds(videodCall().durationTime())"></div>
        </div>

        <!-- ko ifnot: isChoosingScreen() -->
          <div id="video-controls" class="video-controls hide-controls-hidden">
            <div class="video-controls__fit-info" data-bind="l10n_text: z.string.videoCallOverlayFitVideoLabel" data-uie-name="label-fit-fill-info"></div>
            <div class="video-controls__wrapper">
              <div class="video-controls__button" data-bind="click: clickedOnMinimize" data-uie-name="do-call-controls-video-minimize">
                <!-- ko if: hasUnreadMessages() -->
                  <message-unread-icon></message-unread-icon>
                <!-- /ko -->
                <!-- ko ifnot: hasUnreadMessages() -->
                  <message-icon></message-icon>
                <!-- /ko -->
                <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayConversations"></div>
              </div>

              <div class="video-controls__button"
                  data-bind="click: clickedOnMuteAudio, css: {'video-controls__button--active': !selfStreamState.audioSend()}, attr: {'data-uie-value': selfStreamState.audioSend() ? 'inactive' : 'active'}"
                  data-uie-name="do-call-controls-video-call-mute">
                <micoff-icon></micoff-icon>
                <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayMute"></div>
              </div>

              <!-- ko if: showToggleVideo() -->
                <div class="video-controls__button"
                    data-bind="click: clickedOnStopVideo, css: {'video-controls__button--active': selfStreamState.videoSend()}, attr: {'data-uie-value': selfStreamState.videoSend() ? 'active' : 'inactive'}"
                    data-uie-name="do-call-controls-toggle-video">
                  <camera-icon></camera-icon>
                  <!-- ko if: showSwitchCamera() -->
                    <device-toggle-button data-bind="click: clickedOnToggleCamera, clickBubble: false"
                                          params="index: currentDeviceIndex.videoInput, devices: availableDevices.videoInput, type: z.media.MediaDeviceType.VIDEO_INPUT">
                    </device-toggle-button>
                  <!-- /ko -->
                  <!-- ko ifnot: showSwitchCamera() -->
                    <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayVideo"></div>
                  <!-- /ko -->
                </div>
              <!-- /ko -->

              <div class="video-controls__button"
                  data-bind="tooltip: {text: z.string.videoCallScreenShareNotSupported, disabled: !disableToggleScreen()}, click: clickedOnShareScreen, css: {'video-controls__button--active': selfStreamState.screenSend(), 'video-controls__button--disabled': disableToggleScreen()}, attr: {'data-uie-value': selfStreamState.screenSend() ? 'active' : 'inactive', 'data-uie-enabled': disableToggleScreen() ? 'false' : 'true'}"
                  data-uie-name="do-toggle-screen">
                <screenshare-icon></screenshare-icon>
                <!-- ko if: showSwitchScreen() -->
                  <device-toggle-button data-bind="click: clickedOnToggleScreen, clickBubble: false"
                                        params="index: currentDeviceIndex.screenInput, devices: availableDevices.screenInput, type: z.media.MediaDeviceType.SCREEN_INPUT">
                  </device-toggle-button>
                <!-- /ko -->
                <!-- ko ifnot: showSwitchScreen() -->
                  <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayShareScreen"></div>
                <!-- /ko -->
              </div>

              <div class="video-controls__button video-controls__button--red" data-bind="click: clickedOnLeaveCall" data-uie-name="do-call-controls-video-call-cancel">
                <hangup-icon></hangup-icon>
                <div class="video-controls__button__label" data-bind="l10n_text: z.string.videoCallOverlayHangUp"></div>
              </div>
            </div>
          </div>
        <!-- /ko -->
      <!-- /ko -->
    </div>
  <!-- /ko -->
</div>
